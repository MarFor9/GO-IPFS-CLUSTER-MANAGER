// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for Status.
const (
	Alive Status = "Alive"
	Down  Status = "Down"
)

// ClusterNodePairStatus defines model for ClusterNodePairStatus.
type ClusterNodePairStatus struct {
	Cluster IPFSStatus `json:"cluster"`
	Node    IPFSStatus `json:"node"`
}

// GenericErrorMessage defines model for GenericErrorMessage.
type GenericErrorMessage struct {
	Message string `json:"message"`
}

// IPFSHealthCheckResponse defines model for IPFSHealthCheckResponse.
type IPFSHealthCheckResponse struct {
	Status []ClusterNodePairStatus `json:"status"`
}

// IPFSStatus defines model for IPFSStatus.
type IPFSStatus struct {
	ResponseTime string `json:"responseTime"`
	Status       Status `json:"status"`
	Url          string `json:"url"`
}

// PeerStatus defines model for PeerStatus.
type PeerStatus struct {
	AttemptCount      int       `json:"attempt_count"`
	Error             *string   `json:"error,omitempty"`
	IpfsPeerAddresses []string  `json:"ipfs_peer_addresses"`
	IpfsPeerId        string    `json:"ipfs_peer_id"`
	Peername          string    `json:"peername"`
	PriorityPin       bool      `json:"priority_pin"`
	Status            string    `json:"status"`
	Timestamp         time.Time `json:"timestamp"`
}

// Pin defines model for Pin.
type Pin struct {
	Allocations []string                `json:"allocations"`
	Cid         string                  `json:"cid"`
	Created     time.Time               `json:"created"`
	Metadata    *map[string]interface{} `json:"metadata,omitempty"`
	Name        string                  `json:"name"`
	Origins     []string                `json:"origins"`
	PeerMap     map[string]PeerStatus   `json:"peer_map"`
}

// Status defines model for Status.
type Status string

// N400 defines model for 400.
type N400 = GenericErrorMessage

// N500 defines model for 500.
type N500 = GenericErrorMessage

// AddFileMultipartBody defines parameters for AddFile.
type AddFileMultipartBody struct {
	File *openapi_types.File `json:"file,omitempty"`
}

// GetFileParams defines parameters for GetFile.
type GetFileParams struct {
	// Arg The CID of the file to retrieve.
	Arg string `form:"arg" json:"arg"`
}

// AddClusterNodePairJSONBody defines parameters for AddClusterNodePair.
type AddClusterNodePairJSONBody struct {
	ClusterUrl string `json:"clusterUrl"`
	NodeUrl    string `json:"nodeUrl"`
}

// AddFileMultipartRequestBody defines body for AddFile for multipart/form-data ContentType.
type AddFileMultipartRequestBody AddFileMultipartBody

// AddClusterNodePairJSONRequestBody defines body for AddClusterNodePair for application/json ContentType.
type AddClusterNodePairJSONRequestBody AddClusterNodePairJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add file to IPFS cluster
	// (POST /api/v0/add)
	AddFile(w http.ResponseWriter, r *http.Request)
	// Get file from IPFS cluster
	// (POST /api/v0/cat)
	GetFile(w http.ResponseWriter, r *http.Request, params GetFileParams)
	// Add a new IPFS cluster and node URL pair to the whitelist
	// (POST /api/v0/clusterNodePair)
	AddClusterNodePair(w http.ResponseWriter, r *http.Request)
	// Get all pinned files from IPFS cluster
	// (GET /api/v0/pins)
	GetPinnedFiles(w http.ResponseWriter, r *http.Request)
	// Check if the service is up
	// (GET /health)
	Check(w http.ResponseWriter, r *http.Request)
	// Healthcheck
	// (GET /status)
	GetStatus(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Add file to IPFS cluster
// (POST /api/v0/add)
func (_ Unimplemented) AddFile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get file from IPFS cluster
// (POST /api/v0/cat)
func (_ Unimplemented) GetFile(w http.ResponseWriter, r *http.Request, params GetFileParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add a new IPFS cluster and node URL pair to the whitelist
// (POST /api/v0/clusterNodePair)
func (_ Unimplemented) AddClusterNodePair(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all pinned files from IPFS cluster
// (GET /api/v0/pins)
func (_ Unimplemented) GetPinnedFiles(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Check if the service is up
// (GET /health)
func (_ Unimplemented) Check(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Healthcheck
// (GET /status)
func (_ Unimplemented) GetStatus(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// AddFile operation middleware
func (siw *ServerInterfaceWrapper) AddFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddFile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFile operation middleware
func (siw *ServerInterfaceWrapper) GetFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFileParams

	// ------------- Required query parameter "arg" -------------

	if paramValue := r.URL.Query().Get("arg"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "arg"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "arg", r.URL.Query(), &params.Arg)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "arg", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFile(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddClusterNodePair operation middleware
func (siw *ServerInterfaceWrapper) AddClusterNodePair(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddClusterNodePair(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPinnedFiles operation middleware
func (siw *ServerInterfaceWrapper) GetPinnedFiles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPinnedFiles(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Check operation middleware
func (siw *ServerInterfaceWrapper) Check(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Check(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v0/add", wrapper.AddFile)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v0/cat", wrapper.GetFile)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v0/clusterNodePair", wrapper.AddClusterNodePair)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v0/pins", wrapper.GetPinnedFiles)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.Check)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/status", wrapper.GetStatus)
	})

	return r
}

type N400JSONResponse GenericErrorMessage

type N500JSONResponse GenericErrorMessage

type AddFileRequestObject struct {
	Body *multipart.Reader
}

type AddFileResponseObject interface {
	VisitAddFileResponse(w http.ResponseWriter) error
}

type AddFile200JSONResponse struct {
	Hash string `json:"hash"`
}

func (response AddFile200JSONResponse) VisitAddFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AddFile500JSONResponse struct{ N500JSONResponse }

func (response AddFile500JSONResponse) VisitAddFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetFileRequestObject struct {
	Params GetFileParams
}

type GetFileResponseObject interface {
	VisitGetFileResponse(w http.ResponseWriter) error
}

type GetFile200ApplicationoctetStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetFile200ApplicationoctetStreamResponse) VisitGetFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/octet-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetFile500JSONResponse struct{ N500JSONResponse }

func (response GetFile500JSONResponse) VisitGetFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AddClusterNodePairRequestObject struct {
	Body *AddClusterNodePairJSONRequestBody
}

type AddClusterNodePairResponseObject interface {
	VisitAddClusterNodePairResponse(w http.ResponseWriter) error
}

type AddClusterNodePair200Response struct {
}

func (response AddClusterNodePair200Response) VisitAddClusterNodePairResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type AddClusterNodePair204Response struct {
}

func (response AddClusterNodePair204Response) VisitAddClusterNodePairResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type AddClusterNodePair400JSONResponse struct{ N400JSONResponse }

func (response AddClusterNodePair400JSONResponse) VisitAddClusterNodePairResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AddClusterNodePair500JSONResponse struct{ N500JSONResponse }

func (response AddClusterNodePair500JSONResponse) VisitAddClusterNodePairResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPinnedFilesRequestObject struct {
}

type GetPinnedFilesResponseObject interface {
	VisitGetPinnedFilesResponse(w http.ResponseWriter) error
}

type GetPinnedFiles200JSONResponse []Pin

func (response GetPinnedFiles200JSONResponse) VisitGetPinnedFilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPinnedFiles400JSONResponse struct{ N400JSONResponse }

func (response GetPinnedFiles400JSONResponse) VisitGetPinnedFilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetPinnedFiles500JSONResponse struct{ N500JSONResponse }

func (response GetPinnedFiles500JSONResponse) VisitGetPinnedFilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CheckRequestObject struct {
}

type CheckResponseObject interface {
	VisitCheckResponse(w http.ResponseWriter) error
}

type Check200Response struct {
}

func (response Check200Response) VisitCheckResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetStatusRequestObject struct {
}

type GetStatusResponseObject interface {
	VisitGetStatusResponse(w http.ResponseWriter) error
}

type GetStatus200JSONResponse IPFSHealthCheckResponse

func (response GetStatus200JSONResponse) VisitGetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStatus500JSONResponse struct{ N500JSONResponse }

func (response GetStatus500JSONResponse) VisitGetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Add file to IPFS cluster
	// (POST /api/v0/add)
	AddFile(ctx context.Context, request AddFileRequestObject) (AddFileResponseObject, error)
	// Get file from IPFS cluster
	// (POST /api/v0/cat)
	GetFile(ctx context.Context, request GetFileRequestObject) (GetFileResponseObject, error)
	// Add a new IPFS cluster and node URL pair to the whitelist
	// (POST /api/v0/clusterNodePair)
	AddClusterNodePair(ctx context.Context, request AddClusterNodePairRequestObject) (AddClusterNodePairResponseObject, error)
	// Get all pinned files from IPFS cluster
	// (GET /api/v0/pins)
	GetPinnedFiles(ctx context.Context, request GetPinnedFilesRequestObject) (GetPinnedFilesResponseObject, error)
	// Check if the service is up
	// (GET /health)
	Check(ctx context.Context, request CheckRequestObject) (CheckResponseObject, error)
	// Healthcheck
	// (GET /status)
	GetStatus(ctx context.Context, request GetStatusRequestObject) (GetStatusResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// AddFile operation middleware
func (sh *strictHandler) AddFile(w http.ResponseWriter, r *http.Request) {
	var request AddFileRequestObject

	if reader, err := r.MultipartReader(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode multipart body: %w", err))
		return
	} else {
		request.Body = reader
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AddFile(ctx, request.(AddFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddFile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AddFileResponseObject); ok {
		if err := validResponse.VisitAddFileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFile operation middleware
func (sh *strictHandler) GetFile(w http.ResponseWriter, r *http.Request, params GetFileParams) {
	var request GetFileRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFile(ctx, request.(GetFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFileResponseObject); ok {
		if err := validResponse.VisitGetFileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddClusterNodePair operation middleware
func (sh *strictHandler) AddClusterNodePair(w http.ResponseWriter, r *http.Request) {
	var request AddClusterNodePairRequestObject

	var body AddClusterNodePairJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AddClusterNodePair(ctx, request.(AddClusterNodePairRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddClusterNodePair")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AddClusterNodePairResponseObject); ok {
		if err := validResponse.VisitAddClusterNodePairResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPinnedFiles operation middleware
func (sh *strictHandler) GetPinnedFiles(w http.ResponseWriter, r *http.Request) {
	var request GetPinnedFilesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPinnedFiles(ctx, request.(GetPinnedFilesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPinnedFiles")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPinnedFilesResponseObject); ok {
		if err := validResponse.VisitGetPinnedFilesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Check operation middleware
func (sh *strictHandler) Check(w http.ResponseWriter, r *http.Request) {
	var request CheckRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Check(ctx, request.(CheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Check")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CheckResponseObject); ok {
		if err := validResponse.VisitCheckResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetStatus operation middleware
func (sh *strictHandler) GetStatus(w http.ResponseWriter, r *http.Request) {
	var request GetStatusRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetStatus(ctx, request.(GetStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetStatusResponseObject); ok {
		if err := validResponse.VisitGetStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
